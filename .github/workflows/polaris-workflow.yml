# GitHub Action â€“ Black Duck Security Scan:
#     https://documentation.blackduck.com/bundle/bridge/page/documentation/c_using-github-action.html
# GitHub Prerequisites:
#     https://documentation.blackduck.com/bundle/bridge/page/documentation/c_github-prerequisites.html
# Additional GitHub Configuration:
#     https://documentation.blackduck.com/bundle/bridge/page/documentation/c_additional-github-parameters.html
# Using the Black Duck Security Scan Action with Polaris:
#     https://documentation.blackduck.com/bundle/bridge/page/documentation/c_github-polaris.html
# Using Bridge CLI with Polaris:
#     https://documentation.blackduck.com/bundle/bridge/page/documentation/c_using-bridge-with-polaris.html
# Using Bridge CLI with Polaris - GitHub Quickstart:
#     https://documentation.blackduck.com/bundle/bridge/page/documentation/t_github-polaris-cli-quickstart.html
name: Polaris Security Scan
on:
  push:
    branches:
      - main
      - master
      - develop
      - stage
      - release
  pull_request:
    branches:
      - main
      - master
      - develop
      - stage
      - release
  workflow_dispatch: {}
jobs:
  polaris:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - name: Polaris Security Scan
        id: polaris-scan
        uses: blackduck-inc/black-duck-security-scan@v2
        with:
          polaris_server_url: ${{ vars.POLARIS_URL }}
          polaris_access_token: ${{ secrets.POLARIS_ACCESS_TOKEN }}
          polaris_assessment_types: SAST


          ### SCAN CONFIGURATION: Uncomment below to enable
          # polaris_waitForScan: true # Wait for scan completion before proceeding

          ### Mark build status if policy violating issues are found
          # mark_build_status: failure # Set to success, failure, or skip

          ### Optional configuration
          # include_diagnostics: false

          ### GITHUB TOKEN: Uncomment below to enable
          # github_token: ${{ secrets.GITHUB_TOKEN }} # Required when PR Scan or SARIF Upload enabled

          ### SCANNING: Optional fields
          # polaris_prComment_enabled: false

          ### SARIF report generation and upload to GitHub Advanced Security: Uncomment below to enable
          # polaris_reports_sarif_create: false # Create SARIF report and upload it as artifact
          # polaris_upload_sarif_report: false # Upload SARIF report in GitHub Advanced Security tab

      ### Uncomment below configuration to add custom logic based on return status
      # - name: cmdLine
      #   id: cmdLine
      #   run: |
      #     EXIT_CODE=${{ steps.polaris-scan.outputs.status }}
      #     echo "Polaris Scan exit status - $EXIT_CODE"